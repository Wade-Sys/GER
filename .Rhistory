count(subset(df_clean_na, serviceCharge > 2000))
count(subset(df_clean_na, serviceCharge > 2000))
count(subset(df_clean_na, serviceCharge > 1000))
nrow(subset(df_clean_na, serviceCharge > 500))
nrow(subset(df_clean_na, yearConstructed < 1800))
count(subset(df_clean_na, yearConstructed < 1800))
count(subset(df_clean_na, yearConstructed < 1200))
df_clean_1 <- subset(df_clean_na, floor < 1)
df_clean_1 <- subset(df_clean_na, floor > 0)
df_clean_1 <- subset(df_clean_na, floor < 64)
df_clean_2 <- subset(df_clean_1, noRoom > 0)
df_clean_2 <- subset(df_clean_1, noRooms > 0)
df_clean_3 <- subset(df_clean_2, livingSpace > 0)
df_clean_4 <- subset(df_clean_3, yearConstructed > 1214)
df_clean_4 <- subset(df_clean_4, yearConstructed < 2021)
df_clean_5 <- subset(df_clean_4, baseRent > 0)
df_clean_6 <- subset(df_clean_5, serviceCharge > 0)
df_clean_7 <- subset(df_clean_6, serviceCharge <> baseRent)
df_clean_7 <- subset(df_clean_6, serviceCharge != baseRent)
df_cleand <- df_clean_7
View(df_cleand)
rm(df_cleand)
df_cleaned <- df_clean_7
write.csv2(df_cleaned, file = "data/immo_scout_cleaned_final.csv")
quit(save = TRUE)
quit(save = yes)
quit(save = "yes")
View(df_cleaned)
library("shiny")
shiny::runApp('../RealEstate')
runApp('../RealEstate')
runApp('../RealEstate')
runApp('../RealEstate')
runApp('../RealEstate')
runApp('../RealEstate')
runApp('../RealEstate')
shiny::runApp('../RealEstate')
runApp('../RealEstate')
runApp('../RealEstate')
View(df_raw)
df_raw$date
unique(df_raw$date)
mode(df_raw$date)
Mode(df_raw$date)
# Sun Jul 26 13:23:11 2020 ------------------------------
table(df_raw$date)
min(df_raw$floor)
min(df_clean_na$floor)
df_immo_cleaned <- df_clean_7
# Nicht benotigte Spalte entfernen
df_clean_cols <- subset(df_raw, select = -c(
telekomTvOffer
,telekomHybridUploadSpeed
,newlyConst
,picturecount
,pricetrend
,telekomUploadSpeed
,scoutId
,noParkSpaces
,firingTypes
,yearConstructedRange
,houseNumber
,condition
,interiorQual
,petsAllowed
,street
,streetPlain
,baseRentRange
,thermalChar
,numberOfFloors
,noRoomsRange
,livingSpaceRange
,description
,facilities
,heatingCosts
,energyEfficiencyClass
,lastRefurbish
,electricityBasePrice
,electricityKwhPrice
,totalRent
))
### Bereinigung von Datensaetzen
df_clean_na <- na.omit(df_clean_cols) # NAs
write.csv2(df_clean_na, file = "data/immo_scout_cleaned_cols_no_na.csv") # Zwischenspeichern
df_clean_1 <- subset(df_clean_na, floor < 64) # Hoechste Gebaude in DE hat 63 Stockwerke
df_clean_2 <- subset(df_clean_1, noRooms > 0) # Es muss mindesten ein Zimmer vorhanden sein
df_clean_3 <- subset(df_clean_2, livingSpace > 0) # Wohnflaeche muss gueltig sein
df_clean_4 <- subset(df_clean_3, yearConstructed > 1214) # Das aelteste Haus in DE ist 1215
df_clean_4 <- subset(df_clean_4, yearConstructed < 2021) # Erhebung war in 2018 und 2019. Vielleicht wurden Wohnung angeboten die in 2020 fertigstellt werden
df_clean_5 <- subset(df_clean_4, baseRent > 0) # Miete muss groesser 0 sein
df_clean_6 <- subset(df_clean_5, serviceCharge > 0) # Nebenkosten muessen groeßer sein
df_clean_7 <- subset(df_clean_6, serviceCharge != baseRent) # Nebenkosten und Miete duerfen nicht gleich sein
df_immo_cleaned <- df_clean_7
# Finales Dataset speichern
write.csv2(df_cleaned, file = "data/immo_scout_cleaned_final.csv")
View(df_cleaned)
rm(df_cleaned)
rm(df_hp)
table(df_immo_cleaned)
table(df_immo_cleaned$date)
table(df_immo_clean_na$date)
table(df_clean_na$date)
table(df_raw$date)
# Nicht benotigte Spalte entfernen
df_clean_cols <- subset(df_raw, select = -c(
telekomTvOffer
,telekomHybridUploadSpeed
,newlyConst
,picturecount
,pricetrend
,telekomUploadSpeed
,scoutId
,noParkSpaces
,firingTypes
,yearConstructedRange
,houseNumber
,condition
,interiorQual
,petsAllowed
,street
,streetPlain
,baseRentRange
,thermalChar
,numberOfFloors
,noRoomsRange
,livingSpaceRange
,description
,facilities
,heatingCosts
,energyEfficiencyClass
,lastRefurbish
,electricityBasePrice
,electricityKwhPrice
,totalRent
))
### Bereinigung von Datensaetzen
df_clean_na <- na.omit(df_clean_cols) # NAs
write.csv2(df_clean_na, file = "data/immo_scout_cleaned_cols_no_na.csv") # Zwischenspeichern
df_clean_1 <- subset(df_clean_na, floor < 64) # Hoechste Gebaude in DE hat 63 Stockwerke
df_clean_2 <- subset(df_clean_1, noRooms > 0) # Es muss mindesten ein Zimmer vorhanden sein
df_clean_3 <- subset(df_clean_2, livingSpace > 0) # Wohnflaeche muss gueltig sein
df_clean_4 <- subset(df_clean_3, yearConstructed > 1214) # Das aelteste Haus in DE ist 1215
df_clean_4 <- subset(df_clean_4, yearConstructed < 2021) # Erhebung war in 2018 und 2019. Vielleicht wurden Wohnung angeboten die in 2020 fertigstellt werden
df_clean_5 <- subset(df_clean_4, baseRent > 0) # Miete muss groesser 0 sein
df_clean_6 <- subset(df_clean_5, serviceCharge > 0) # Nebenkosten muessen groeßer sein
df_clean_7 <- subset(df_clean_6, serviceCharge != baseRent) # Nebenkosten und Miete duerfen nicht gleich sein
df_immo_cleaned <- df_clean_7
# Finales Dataset speichern
write.csv2(df_immo_cleaned, file = "data/immo_scout_cleaned_final.csv")
shiny::runApp('GER')
runApp('test')
runApp('~/R/GER')
runApp('RealEstate')
runApp('~/R/GER')
runApp('GER')
runApp('GER')
table(df_immo_cleaned$date)
library(ggplot2)
table(df_immo_cleaned$regio1)
aggregate(df_immo_cleaned$baseRent, by = list(df_immo_cleaned$regio1), FUN = mean)
aggregate(df_immo_cleaned$baseRent, by = list(df_immo_cleaned$regio1, df_immo_cleaned$date), FUN = mean)
df_agg_by_bl_date <- aggregate(df_immo_cleaned$baseRent, by = list(df_immo_cleaned$regio1, df_immo_cleaned$date), FUN = mean)
ggplot()+geom_bar(data = df_agg_by_bl_date)
ggplot()+geom_bar(aes(df_agg_by_bl_date))
colnames(df_agg_by_bl_date$Group.1) <- "Bundesland"
colnames(df_agg_by_bl_date)[1] <- "Bundesland"
df_agg_by_bl_date
colnames(df_agg_by_bl_date)[2] <- "Datum"
colnames(df_agg_by_bl_date)[3] <- "Durchschnittsmiete"
df_agg_by_bl_date
ggplot(data = df_agg_by_bl_date, aes(x=Bundesland, y=Durchschnittsmiete))+geom_bar()
ggplot(data = df_agg_by_bl_date, aes(x=Bundesland, y=Durchschnittsmiete))+geom_bar(stat = "identify")
ggplot(data = df_agg_by_bl_date, aes(x="Bundesland", y="Durchschnittsmiete"))+geom_bar(stat = "identify")
barplot(df_agg_by_bl_date)
ggplot(data = df_agg_by_bl_date, aes(x=Bundesland, y=Durchschnittsmiete, fill=Datum))+geom_bar(stat = "identify")
ggplot(data = df_agg_by_bl_date, aes(x=Bundesland, y=Durchschnittsmiete, fill=Datum))+geom_bar(stat = "identify", position = position_dodge())
ggplot(data = df_agg_by_bl_date, aes(x=Bundesland, y=Durchschnittsmiete, fill=Datum))+geom_bar(stat = "identity", position = position_dodge())
ggplot(data = df_agg_by_bl_date, aes(x=Bundesland, y=Durchschnittsmiete, fill=Datum))+geom_bar(stat = "identity", position = position_dodge2())
df_agg_by_bl_date$Datum <- factor(df_agg_by_bl_date$Datum, levels = c(Sep18, May19, Oct19, Feb20))
df_agg_by_bl_date$Datum <- factor(df_agg_by_bl_date$Datum, levels = c("Sep18", "May19", "Oct19", "Feb20"))
ggplot(data = df_agg_by_bl_date, aes(x=Bundesland, y=Durchschnittsmiete, fill=Datum))+geom_bar(stat = "identity", position = position_dodge2())
df_agg_by_bl_date
runApp('GER')
runApp('GER')
ggplot(data = df_agg_by_bl_date, aes(x=Bundesland, y=Durchschnittsmiete, fill=Datum))+
geom_bar(stat = "identity", position = position_dodge())+
theme(axis.text.x = element_text(angle = 90))
table(df_immo_cleaned$baseRent)
table(subset(df_immo_cleaned$baseRent, baseRent > 900))
table(subset(df_immo_cleaned, baseRent > 900))
subset(df_immo_cleaned, baseRent > 900)
subset(df_immo_cleaned$baseRent, baseRent > 900)
subset(df_immo_cleaned$baseRent)
boxplot(df_immo_cleaned$baseRent)
df_test <- subset(df_immo_cleaned, select = c(date, baseRent))
df_test
Summary(df_test)
summary(df_test)
table(subset(df_test, date = Sep18))
max(subset(df_test, date = Sep18))
max(subset(df_test, date = Sep19))
runApp('GER')
ggplot(data = df_agg_by_bl_date, aes(x=Bundesland, y=Durchschnittsmiete, fill=Datum))+
geom_bar(stat = "identity", position = position_dodge())+
theme(axis.text.x = element_text(angle = 90))
df_median_by_bl_date <- aggregate(df_immo_cleaned$baseRent, by = list(df_immo_cleaned$regio1, df_immo_cleaned$date), FUN = median)
colnames(df_median_by_bl_date)[1] <- "Bundesland"
colnames(df_median_by_bl_date)[2] <- "Datum"
colnames(df_median_by_bl_date)[3] <- "Modus"
ggplot(data = df_median_by_bl_date, aes(x=Bundesland, y=Modus, fill=Datum))+
geom_bar(stat = "identity", position = position_dodge())+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = df_agg_by_bl_date, aes(x=Bundesland, y=Durchschnittsmiete, fill=Datum))+
geom_bar(stat = "identity", position = position_dodge())+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = df_median_by_bl_date, aes(x=Bundesland, y=Modus, fill=Datum))+
geom_bar(stat = "identity", position = position_dodge())+
theme(axis.text.x = element_text(angle = 90))
df_median_by_bl_date$Datum <- factor(df_median_by_bl_date$Datum, levels = c("Sep18", "May19", "Oct19", "Feb20"))
ggplot(data = df_median_by_bl_date, aes(x=Bundesland, y=Modus, fill=Datum))+
geom_bar(stat = "identity", position = position_dodge())+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = df_agg_by_bl_date, aes(x=Bundesland, y=Durchschnittsmiete, fill=Datum))+
geom_bar(stat = "identity", position = position_dodge())+
theme(axis.text.x = element_text(angle = 90))
runApp('GER')
df_sd_by_bl_date <- aggregate(df_immo_cleaned$baseRent, by = list(df_immo_cleaned$regio1, df_immo_cleaned$date), FUN = sd)
df_sd_by_bl_date <- aggregate(df_immo_cleaned$baseRent, by = list(df_immo_cleaned$regio1, df_immo_cleaned$date), FUN = sd)
colnames(df_sd_by_bl_date)[1] <- "Bundesland"
colnames(df_sd_by_bl_date)[2] <- "Datum"
colnames(df_sd_by_bl_date)[3] <- "SD"
df_sd_by_bl_date$Datum <- factor(df_sd_by_bl_date$Datum, levels = c("Sep18", "May19", "Oct19", "Feb20"))
ggplot(data = df_sd_by_bl_date, aes(x=Bundesland, y=SD, fill=Datum))+
geom_bar(stat = "identity", position = position_dodge())+
theme(axis.text.x = element_text(angle = 90))
df_immo_by_br_dt <- subset(df_immo_cleaned, select = c(regio1, baseRent, date))
ggplot(data = df_sd_by_bl_date)+
geom_boxplot()
df_immo_by_br_dt
ggplot(data = df_sd_by_bl_date,aes(x=regio1, y=baseRent, fill=date))+
geom_boxplot()
ggplot(data = df_sd_by_bl_date, aes(x=regio1, y=baseRent))+
geom_boxplot()
ggplot(data = df_immo_by_br_dt, aes(x=regio1, y=baseRent, fill=date))+
geom_boxplot()
ggplot(data = df_immo_by_br_dt, aes(x=regio1, y=baseRent, fill=date))+
geom_boxplot()+ ylim(0,50)
ggplot(data = df_immo_by_br_dt, aes(x=regio1, y=baseRent, fill=date))+
geom_boxplot()+ ylim(0,10000)
ggplot(data = df_immo_by_br_dt, aes(x=regio1, y=baseRent, fill=date))+
geom_boxplot()+ ylim(0,2000)
ggplot(data = df_immo_by_br_dt, aes(x=regio1, y=baseRent, fill=date))+
geom_boxplot() + scale_y_continuous(trans='log2')
ggplot(data = df_immo_by_br_dt, aes(x=regio1, y=baseRent, fill=date))+
geom_boxplot() + scale_y_continuous(trans='log10')
ggplot(data = df_immo_by_br_dt, aes(x=regio1, y=baseRent, fill=date))+
geom_boxplot() + scale_y_continuous(trans='log2')
ggplot(data = df_immo_by_br_dt, aes(x=regio1, y=baseRent, fill=date))+
geom_boxplot() + scale_y_continuous(trans='log10')+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = df_immo_by_br_dt, aes(x=regio1, y=baseRent, fill=date))+
geom_boxplot() + scale_y_continuous(trans='log2')+
annotation_logticks(scaled = FALSE, sides = "l")+
theme(axis.text.x = element_text(angle = 90))
ggplot(data = df_immo_by_br_dt, aes(x=regio1, y=baseRent, fill=date))+
geom_boxplot() + scale_y_continuous(trans='log2')+
annotation_logticks(scaled = TRUE, sides = "l")+
theme(axis.text.x = element_text(angle = 90))
df_immo_by_br_dt
df_immo_by_br_dt <- subset(df_immo_cleaned, select = c(regio1, baseRent, date))
colnames(df_immo_by_br_dt)[1] <- "regio1"
colnames(df_immo_by_br_dt)[2] <- "baseRent"
colnames(df_immo_by_br_dt)[3] <- "date"
ggplot(data = df_immo_by_br_dt, aes(x=regio1, y=baseRent, fill=date))+
geom_boxplot() + scale_y_continuous(trans='log2')+
annotation_logticks(scaled = TRUE, sides = "l")+
theme(axis.text.x = element_text(angle = 90))
df_immo_by_br_dt <- subset(df_immo_cleaned, select = c(regio1, baseRent, date))
df_immo_by_br_dt$date <- factor(df_immo_by_br_dt$date, levels = c("Sep18", "May19", "Oct19", "Feb20"))
ggplot(data = df_immo_by_br_dt, aes(x=regio1, y=baseRent, fill=date))+
geom_boxplot() + scale_y_continuous(trans='log2')+
annotation_logticks(scaled = TRUE, sides = "l")+
theme(axis.text.x = element_text(angle = 90))
runApp('GER')
runApp('GER')
df_immo_br_ls <- subset(df_immo_cleaned, select = c(livingSpace, baseRent))
df_immo_br_ls <- subset(df_immo_cleaned, select = c(livingSpace, baseRent))
lmtest <- lm(df_immo_br_ls$baseRent, df_immo_br_ls$livingSpace)
lmtest <- lm(df_immo_br_ls$baseRent ~ df_immo_br_ls$livingSpace)
lmtest
summary(lmtest)
plot(df_immo_br_ls$baseRent, df_immo_br_ls$livingSpace)+abline(lmtest, col = "blue")
plot(df_immo_br_ls$livingSpace,df_immo_br_ls$baseRent)+abline(lmtest, col = "blue")
plot(df_immo_br_ls$livingSpace,df_immo_br_ls$baseRent)+abline(lmtest, col = "blue")+ scale_y_continuous(trans='log2')
plot(df_immo_br_ls$livingSpace,df_immo_br_ls$baseRent)+abline(lmtest, col = "blue")+xlim(0,2000)
ggplot(data = df_immo_br_ls, aes(x=livingSpace, y=baseRent))+
geom_line()+
abline(lmtest, col = "blue")
+ylim(0,2000)
ggplot(data = df_immo_br_ls, aes(x=livingSpace, y=baseRent))+
geom_point()+
abline(lmtest, col = "blue")
+ylim(0,2000)
ggplot(data = df_immo_br_ls, aes(x=livingSpace, y=baseRent))+
geom_point()+
geom_line(lmtest, col = "blue")+
ylim(0,2000)
ggplot(data = df_immo_br_ls, aes(x=livingSpace, y=baseRent))+
geom_point()+
geom_line(lmtest, col = "blue")+
ylim(0,2000)
plot(df_immo_br_ls$livingSpace,df_immo_br_ls$baseRent)+abline(lmtest, col = "blue")
summary(lmtest)
lmtest <- lm(df_immo_cleaned$baseRent ~ df_immo_cleaned$regio1)
summary(lmtest)
cor(df_immo_cleaned$baseRent, df_immo_cleaned$livingSpace)
cor(df_immo_cleaned$baseRent, df_immo_cleaned$livingSpace, method = "pearson")
cor(df_immo_cleaned$baseRent, df_immo_cleaned$regio1, method = "pearson")
cor(df_immo_cleaned$baseRent, df_immo_cleaned$livingSpace, method = "pearson")
cor_br_ls <- cor(df_immo_cleaned$baseRent, df_immo_cleaned$livingSpace, method = "pearson")
ggplot(data = df_immo_br_ls, aes(x=livingSpace, y=baseRent,))+
geom_point()+
geom_line(cor_br_ls, col = "blue")+
ylim(0,2000)
plot(df_immo_br_ls$livingSpace,df_immo_br_ls$baseRent)+abline(cor_br_ls, col = "blue")
shiny::runApp('GER')
view(df_immo_br_ls)
View(df_immo_br_ls)
cor(df_immo_br_ls)
cor(df_immo_br_ls_dt)
cor(df_immo_br_ls)
cor(df_immo_br_ls, method = "pearson")
cor(df_immo_br_ls$livingSpace,df_immo_br_ls$baseRent, method = "pearson")
cor(df_immo_cleaned$livingSpace,df_immo_cleaned$baseRent, method = "pearson")
cor(df_immo_cleaned, method = "pearson")
cor(df_immo_br_ls, method = "pearson")
cor(df_immo_cleaned$livingSpace,df_immo_cleaned$baseRent, method = "pearson")
cor(df_immo_cleaned$noRooms,df_immo_cleaned$baseRent, method = "pearson")
View(df_immo_cleaned)
cor(df_immo_cleaned$geo_plz,df_immo_cleaned$baseRent, method = "pearson")
cor(as.numeric(df_immo_cleaned$geo_plz),df_immo_cleaned$baseRent, method = "pearson")
cor(as.numeric(df_immo_cleaned$yearConstructed),df_immo_cleaned$baseRent, method = "pearson")
cor(as.numeric(df_immo_cleaned$yearConstructed),df_immo_cleaned$baseRent, method = "pearson")
names(df_immo_cleaned)
df_immo_cor_reduced <- subset(df_immo_cleaned, select = c(
serviceCharge
,baseRent
,livingSpace
,noRooms
,floor
))
cor(df_immo_cor_reduced, method="pearson")
View(df_test)
rm(list(df_test))
rm(list("df_test"))
rm("df_test")
rm("df_sd_by_bl_date")
rm("df_immo_br_ls")
rm("df_immo_by_br_dt")
rm("df_immo_cor_reduced")
rm("df_agg_by_bl_date")
rm("df_media_by_bl_date")
View(df_median_by_bl_date)
rm("df_median_by_bl_date")
rm("lmtest")
rm(list = c("df_clean_1", "df_clean_2"))
rm(list = c("df_clean_3", "df_clean_4"))
rm(list = c("df_clean_5", "df_clean_6"))
rm(list = c("df_clean_cols", "df_clean_7"))
rm(list = c("df_clean_na"))
View(df_immo_cleaned)
df_immo_cl_reduced <- subset(df_immo_cleaned, select = c(
serviceCharge
,baseRent
,livingSpace
,noRooms
,floor
))
df_cor_saarland <- subset(df_immo_cleaned, df_immo_cleaned$regio1 = "Saarland")
df_cor_saarland <- subset(df_immo_cleaned, regio1 = 'Saarland')
df_cor_saarland <- subset(df_immo_cleaned, regio1 = 'Bremen')
df_cor_saarland <- subset(df_immo_cleaned, regio1 = 'Bremen')
View(df_cor_saarland)
df_cor_saarland <- subset(df_immo_cleaned, regio1 = "Bremen")
View(df_cor_saarland)
df_cor_saarland <- subset(df_immo_cleaned, regio1 = "Berlin")
rm("df_cor_saarland")
df_cor_saarland <- subset(df_immo_cleaned, regio1 = "Berlin")
rm("df_cor_saarland")
rm("cor_br_ls")
df_cor_test <- df_immo_cleaned[df_immo_cleand$regio1 = "Berlin"]
df_cor_test <- df_immo_cleaned[df_immo_cleaned$regio1 = "Berlin"]
df_cor_test <- subset(df_immo_cleaned, regio1 = "Berlin")
rm("df_cor_test")
df_cor_test <- subset(df_immo_cleaned, grepl("Berlin", df_immo_cleaned[['regio1']])
)
View(df_cor_test)
df_cor_test <- subset(df_immo_cleaned, grepl("Berlin", df_immo_cleaned[['regio1']]), select = c(
serviceCharge
,baseRent
,livingSpace
,noRooms
,floor
))
View(df_cor_test)
df_cor_test <- subset(df_immo_cleaned, grepl("Berlin", df_immo_cleaned[['regio1']]), select = c(
serviceCharge
,baseRent
,livingSpace
,noRooms
,floor
,yearConstructed
))
View(df_cor_test)
df_immo_cl_reduced <- subset(df_immo_cleaned, select = c(
serviceCharge
,baseRent
,livingSpace
,noRooms
,floor
,yearConstructed
))
View(df_cor_test)
View(df_cor_test)
fitEstate <- lm(df_cor_test$baseRent ~ df_cor_test$livingSpace + df_cor_test$noRooms + df_cor_test$floor + df_cor_test$yearConstructed)
fitEstate
fitEstate <- lm(df_cor_test$baseRent ~ df_cor_test$livingSpace + df_cor_test$noRooms + df_cor_test$floor + df_cor_test$yearConstructed, data=df_cor_test)
fitEstate
summary(fitEstate)
50*(18.186)+3*(-31.021)+4*(15.086)+1972*(1.779)-3803.5
36*(18.186)+1*(-31.021)+0*(15.086)+1974*(1.779)-3803.5
36*(18.186)+1*(-31.021)+1*(15.086)+1974*(1.779)-3803.5
36*(18.186)+1*(-31.021)+0*(15.086)+1974*(1.779)-3803.5
shiny::runApp('GER')
df_cor_test_bw <- subset(df_immo_cleaned, grepl("Baden_Württemberg", df_immo_cleaned[['regio1']]), select = c(
serviceCharge
,baseRent
,livingSpace
,noRooms
,floor
,yearConstructed
))
View(df_cor_test_bw)
fitEstate_bw <- lm(df_cor_test$baseRent ~ df_cor_test$livingSpace + df_cor_test$noRooms + df_cor_test$floor + df_cor_test$yearConstructed, data=df_cor_test)
summary(fitEstate_bw)
fitEstate_bw
fitEstate
fitEstate_bw <- lm(df_cor_test_bw$baseRent ~ df_cor_test_bw$livingSpace + df_cor_test_bw$noRooms + df_cor_test_bw$floor + df_cor_test_bw$yearConstructed, data=df_cor_test_bw)
fitEstate_bw
36*(11.1714)+1*(-49.4003)+0*(36.3298)+1974*(0.4889)-910.9658
36*(11.1714)+1*(-49.4003)+0*(36.3298)+2019*(0.4889)-910.9658
X <- model.matrix(fitEstate_bw)
View(X)
Xplus <- solve(t(X) %*% X) %*% t(X)
View(Xplus)
(b <- Xplus %*% df_cor_test_bw$baseRent)
H <- X %*% Xplus
Yhat <- H %*% df_cor_test_bw$baseRent
all.equal(fitted(fitEstate_bw),c(Yhat), check.attributes = FALSE)
View(Yhat)
51*(11.1714)+2*(-49.4003)+4*(36.3298)+1955*(0.4889)-910.9658
summary(fitEstate_bw)
confint(fitEstate_bw)
fitEstate_bw_z <- lm(scale(df_cor_test_bw$baseRent) ~ scale(df_cor_test_bw$livingSpace) + scale(df_cor_test_bw$noRooms) + scale(df_cor_test_bw$floor) + scale(df_cor_test_bw$yearConstructed), data=df_cor_test_bw)
fitEstate_bw_z
fitEstate_bw_z$coefficients
fitEstate_bw_z$fitted.values
fitEstate_bw_z$coefficients
51*(11.1714)+2*(-49.4003)+4*(36.3298)+1955*(0.4889)-910.9658
75*(11.1714)+3*(-49.4003)+2*(36.3298)+2010*(0.4889)-910.9658
75*(11.1714)+3*(-49.4003)+2*(36.3298)+2015*(0.4889)-910.9658
90*(11.1714)+4*(-49.4003)+2*(36.3298)+2018*(0.4889)-910.9658
79*(11.1714)+3*(-49.4003)+6*(36.3298)+1976*(0.4889)-910.9658
fitEstate
fitEstate_bw
View(df_immo_cleaned)
df_cor_test_nrw <- subset(df_immo_cleaned, grepl("Nordrhein_Westfalen", df_immo_cleaned[['regio1']]), select = c(
serviceCharge
,baseRent
,livingSpace
,noRooms
,floor
,yearConstructed
))
fitEstate_nrw <- lm(df_cor_test_nrw$baseRent ~ df_cor_test_nrw$livingSpace + df_cor_test_nrw$noRooms + df_cor_test_nrw$floor + df_cor_test_nrw$yearConstructed, data=df_cor_test_nrw)
fitEstate_nrw
fitEstate
79*(11.1714)+3*(-49.4003)+6*(36.3298)+1976*(0.4889)-910.9658
79*(18.186)+3*(-31.021)+6*(15.086)+1976*(1.779)-3803.500
79*(6.995)+3*(25.184)+6*(4.959)+1976*(2.091)-4113.330
shiny::runApp('GER')
runApp('GER')
runApp('GER')
df_immo_cleaned$regio1)
unique(df_immo_cleaned$regio1)
list(unique(df_immo_cleaned$regio1))
runApp('GER')
View(df_immo_cleaned)
runApp('GER')
shiny::runApp('GER')
runApp('GER')
runApp('GER')
runApp('GER')
runApp('GER')
runApp('GER')
runApp('GER')
runApp('GER')
runApp('GER')
runApp('GER')
shiny::runApp('GER')
install.packages("shinyWidgets")
runApp('GER')
